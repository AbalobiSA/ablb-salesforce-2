{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as jsforce from 'jsforce';\nimport {RateLimiter} from 'limiter';\nimport sanitize from \"sanitize-filename\";\nimport * as fs from 'fs';\nimport Secrets from \"./secrets\";\n\nclass Salesforce {\n\n    private secrets: Secrets;\n\n    constructor(username: string, password: string) {\n        this.secrets = new Secrets(username, password);\n    }\n\n    /**\n     * Creates a manual connection to salesforce and passes back the connection\n     * object in a promise\n     */\n    createConnection(): Promise<any> {\n        let conn = new jsforce.Connection({});\n        console.log(\"Salesforce: Logging in...\");\n        return new Promise((resolve, reject) => {\n            conn.login(this.secrets.SF_USER, this.secrets.SF_PASSWORD, (err, res) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    console.log(\"Salesforce: Login Successful.\\n\");\n                    resolve(conn);\n                }\n            });\n        });\n    }\n\n    createSearch(conn: any, querystring: string): Promise<any> {\n        const removeDashes = (text) => text.split(\"-\").join(\"\\\\-\");\n        return new Promise((resolve, reject) => {\n            conn.search(removeDashes(querystring), (err, res) => {\n                if (err) {\n                    console.log(\"salesforce: search error: \", err);\n                    reject(err);\n                } else {\n                    console.log(`salesforce: search debug: RESPONSES RECEIVED: ${res.searchRecords.length}`);\n                    resolve(res);\n                }\n            });\n        })\n    }\n\n    /**\n     * Update a single record in a table.\n     * @param conn\n     * @param table\n     * @param updateobject\n     * @returns {Promise}\n     */\n    updateSingle(conn: any, table: string, updateobject: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            // Single record update\n            conn.sobject(table).update(updateobject, function (err, ret) {\n                if (err || !ret.success) {\n                    // error(err);\n                    console.error(err, ret);\n                    reject([err, ret]);\n                }\n                else {\n                    console.log('Updated Successfully : ' + ret.id);\n                    resolve(ret.id);\n                }\n            });\n        })\n    }\n\n    /**\n     * Take a single object and create a new Salesforce record in a specific table.\n     * Returns a promise with error or success string.\n     * @param conn\n     * @param tableName\n     * @param data\n     * @returns {Promise}\n     */\n    createSingle(conn: any, tableName: string, data: any): Promise<any> {\n        // Single record creation\n        return new Promise((resolve, reject) => {\n            conn.sobject(tableName).create(data, (err, ret) => {\n                if (err || !ret.success) {\n                    reject(err);\n                    return console.error(err, ret);\n                } else {\n                    // Resolve with the created record ID\n                    resolve(ret.id)\n                }\n            });\n        });\n    }\n\n    createSingleFake(conn, tableName, data): Promise<any> {\n        // Single record creation\n        return new Promise((resolve, reject) => {\n            let currentDate = new Date();\n            let dateString = currentDate.toISOString();\n            let filename = sanitize(dateString);\n            fs.writeFile(\"../../\" + filename + \".json\", JSON.stringify(data, null, 4), (err) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(\"FAKE_SALESFORCE_ID\");\n                }\n            })\n        });\n    }\n\n\n    /**\n     * Takes an array of objects to insert into a Salesforce table.\n     * @param conn - Connection passed into this function\n     * @param sfObject - Table to insert objects into\n     * @param data - Array of data to insert into table\n     */\n    createMultiple(conn, sfObject, data) {\n        let limiter = new RateLimiter(1, 250);\n        let splitData = splitArray(data);\n\n        for (let i = 0; i < splitData.length; i++) {\n            limiter.removeTokens(1, function () {\n                conn.sobject(sfObject).create(splitData[i], (err, rets) => {\n                    if (err) {\n                        return console.error(err);\n                    }\n                    for (let i = 0; i < rets.length; i++) {\n                        if (rets[i].success) {\n                            console.log(\"Created record id : \" + rets[i].id);\n                        }\n                    }\n                })\n            });\n        }\n\n        // Splits the array of data into chunks of 10\n        function splitArray(array) {\n            let i, j, temparray, chunk = 10;\n            let newArray: any[] = [];\n            for (i = 0, j = array.length; i < j; i += chunk) {\n                temparray = array.slice(i, i + chunk);\n                newArray.push(temparray);\n            }\n            return newArray;\n        }\n    }\n\n    getFieldNames(conn, sfObject) {\n        return new Promise((resolve, reject) => {\n            conn.sobject(sfObject)\n                .select('*')\n                .limit(1)\n                .execute(this.getRecords)\n                .then(records => {\n                    let keysArr: any[] = [];\n                    // Build an array of fields in this object\n                    if (records.length > 0) {\n                        for (let i in records[0]) {\n                            if (records[0].hasOwnProperty(i)) {\n                                keysArr.push(i);\n                            }\n                        }\n                        resolve(keysArr);\n                        return;\n                    } else {\n                        reject(\"No records found for \" + sfObject);\n                    }\n\n                }).catch(ex => {\n                console.log(\"Error\");\n                console.log(ex);\n                reject(\"Error in SalesForce: \" + ex);\n            });\n        });\n    }\n\n\n    /**\n     * Promisify function for sfObject execute chain method\n     * @param err\n     * @param records\n     * @returns {Promise}\n     */\n    getRecords(err, records) {\n        return new Promise((resolve, reject) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(records);\n            }\n        })\n    }\n\n    deleteSingle(conn, table, objectId) {\n        return new Promise((resolve, reject) => {\n            conn.sobject(table).destroy(objectId, function (err, ret) {\n                if (err || !ret.success) {\n                    reject(err);\n                    console.error(err, ret);\n                } else {\n                    resolve(ret.id);\n                }\n                console.log('Salesforce: Deleted Successfully : ' + ret.id);\n            });\n        })\n    }\n\n    deleteMultiple(conn, table, thingsToDelete) {\n        return new Promise((resolve, reject) => {\n            let limiter = new RateLimiter(1, 250);\n            // let splitData = splitArray(data);\n\n            for (let i = 0; i < thingsToDelete.length; i++) {\n                limiter.removeTokens(1, () => {\n                    conn.sobject(table).destroy(thingsToDelete[i], (err, ret) => {\n                        if (err || !ret.success) {\n                            reject(err);\n                            console.error(err, ret);\n                        } else {\n                            resolve(ret.id);\n                        }\n                        console.log('Salesforce: Deleted Successfully : ' + ret.id);\n                    });\n\n                    if (i === thingsToDelete.length - 1) {\n                        resolve(\"All items deleted successfully!\");\n                    }\n                });\n            }\n        })\n    }\n}\n\n\nmodule.exports = Salesforce;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"sourceRoot":"/source/"}